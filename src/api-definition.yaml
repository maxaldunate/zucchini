swagger: "2.0"
info:
  version: 1.0.0
  title: Zucchini API
  description: Zucchini is an Restful, Secure & Serverless API demonstration for use to an App... everything using AWS
  termsOfService: http://zucchini.escamarla.com/terms/
  contact:
    name: Zucchini API Team
    email: zucchini.apiteam@escamarla.com
    url: http://zucchini.escamarla.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
host: api.zucchini.escamarla.com
basePath: /v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /course:
    get:
      operationId: listCurrentCourse
      description: 'filter by name, university or area'
      parmeters:
        - name: coursePartialName
          in: query
          required: false
          schema:
            type: string
        - name: universityPartialName
          in: query
          required: false
          schema:
            type: string
        - name: areaPartialName
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                $ref : '#/definitions/Course'
        '400':
          description: Bad request
  /student:
    post:
      operationId: addOrUpdateStudent
      description: ''
      summary: Register a new student
      requestBody:
        description: Register a **new** student
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Student'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
          content:
            application/json:
              schema:
                type : string
                format: uuid          
        '401':
          $ref: '#/definitions/responses/Unauthorized' 
  /student/{id}/course/:
    get:
      operationId: listStudentCourses
      description: 'filter by current, old or future'
      parmeters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            enum: uuid
        - name: pointInTime
          in: query
          required: true
          schema:
            type: string
            enum: [current, old, future]
      responses:
        '200':
          description: List of student's courses
          content:
            application/json:
              schema:
                $ref : '#/definitions/Course'
        '400':
          description: Bad request
        '401':
          $ref: '#/definitions/responses/Unauthorized' 
  /student/{studentId}/course/{id}:
    post:
      operationId: enroll
      description: 'check course dates' 
      parmeters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
            enum: uuid
        - name: id
          in: path
          required: true
          schema:
            type: string
            enum: uuid
      responses:
        '201':
          description: enrolled
        '400':
          description: Bad request
        '401':
          $ref: '#/definitions/responses/Unauthorized' 
    delete:
      operationId: unenroll
      description: 'no check already enrolled'
      parmeters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
            enum: uuid
        - name: id
          in: path
          required: true
          schema:
            type: string
            enum: uuid
      responses:
        '201':
          description: unenrolled
        '400':
          description: Bad request
  /university:
    post:
      operationId: addUniversty
      description: ''
      requestBody:
        description: Register a **new** universirty
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/University'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
          content:
            application/json:
              schema:
                type : string
                format: uuid          
        '401':
          $ref: '#/definitions/responses/Unauthorized' 
  /university/{id}/course:
    get:
      operationId: addUniversty
      description: >
       filter by current, old or future
    post:
      operationId: addCourse
      description: ''
  /university/{universityId}/course/{id}:
    post:
      operationId: updateCourse
      description: ''
    delete:
      operationId: deleteCourse
      description: 'check for no enrolled student'
  /university/{id}/student:
    get:
      operationId: listUniversityStudents
      description: 'filter by course ids'
definitions:
  Course:
    type: object
    required:
      - id
      - name
      - dateStart
      - dateEnd
      - universityOwner
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      dateStart:
        type: string
        format: date
      dateEnd:
        type: string
        format: date
      universityOwner:
        type: string
        format: uuid
      description:
        type: string
      area:
        type: string
        enum: [arts, business, computer, math, language, social]
  Student:
    type: object
    required:
      - id
      - fullName
      - email
    properties:
      id:
        type: string
        format: uuid
      fullName:
        type: string
      email:
        type: string
        format: email
      phone:
        type: string
        format: phone
  University:
    type: object
    required:
      - id
      - email
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      email:
        type: string
        format: email
      emailNotifications:
        type: string
        format: email
  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
    required:
      - code
      - message
  responses:
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/definitions/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/definitions/Error'
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string